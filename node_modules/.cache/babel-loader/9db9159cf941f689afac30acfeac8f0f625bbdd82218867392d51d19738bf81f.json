{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shash\\\\Desktop\\\\Hackathon\\\\scb-bank-policy\\\\src\\\\components\\\\UserTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { sortData } from '../utils/sort'; // Import your sorting function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserTable = () => {\n  _s();\n  const initialUsers = [{\n    id: 1,\n    name: 'Shashwat sirjam',\n    role: 'Admin',\n    email: 'Shashwat@example.com',\n    lastLogin: '2022-10-01',\n    actions: ['Edit', 'Delete']\n  }, {\n    id: 2,\n    name: 'Mansi',\n    role: 'User',\n    email: 'Mansi@example.com',\n    lastLogin: '2022-09-28',\n    actions: ['Edit', 'Delete']\n  }, {\n    id: 3,\n    name: 'Sourabh',\n    role: 'Admin',\n    email: 'Sourabh@example.com',\n    lastLogin: '2022-10-01',\n    actions: ['Edit', 'Delete']\n  }, {\n    id: 4,\n    name: 'Purneeth',\n    role: 'User',\n    email: 'Purneeth@example.com',\n    lastLogin: '2022-09-28',\n    actions: ['Edit', 'Delete']\n  }\n  // Add more users as needed\n  ];\n  const [users, setUsers] = useState(initialUsers);\n  const [sortedUsers, setSortedUsers] = useState([]);\n  const [sortBy, setSortBy] = useState('name');\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [editIndex, setEditIndex] = useState(-1); // Track the index of the user being edited\n  const [selectedRole, setSelectedRole] = useState(''); // Track the selected role for editing\n\n  // Function to handle sorting\n  const handleSort = field => {\n    const direction = sortBy === field && sortDirection === 'asc' ? 'desc' : 'asc';\n    setSortBy(field);\n    setSortDirection(direction);\n    setSortedUsers(sortData(users, field, direction));\n  };\n\n  // Function to delete a user\n  const handleDelete = id => {\n    const updatedUsers = users.filter(user => user.id !== id);\n    setUsers(updatedUsers);\n    setSortedUsers(sortData(updatedUsers, sortBy, sortDirection)); // Update sorted users if necessary\n  };\n\n  // Function to toggle edit mode for a user\n  const toggleEdit = index => {\n    setEditIndex(index === editIndex ? -1 : index); // Toggle edit mode\n    if (index !== editIndex) {\n      setSelectedRole(users[index].role); // Set selected role when entering edit mode\n    } else {\n      setSelectedRole(''); // Reset selected role when exiting edit mode\n    }\n  };\n\n  // Function to save changes for a user\n  const saveChanges = index => {\n    const updatedUsers = [...users];\n    updatedUsers[index].role = selectedRole; // Update user role with selected role\n    setUsers(updatedUsers);\n    setEditIndex(-1); // Exit edit mode\n    // Additional logic (e.g., API calls) can be added here\n  };\n\n  // Determine which array to display (sorted or original)\n  const usersToDisplay = sortedUsers.length > 0 ? sortedUsers : users;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"policy-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Management Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort('name'),\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort('role'),\n            children: \"Role\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort('email'),\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleSort('lastLogin'),\n            children: \"Last Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: usersToDisplay.map((user, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: editIndex === index ? /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedRole,\n              onChange: e => setSelectedRole(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Admin\",\n                children: \"Admin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"User\",\n                children: \"User\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Creator\",\n                children: \"Creator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Approver\",\n                children: \"Approver\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Creator and Approver\",\n                children: \"Creator and Approver\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }, this) : user.role\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.lastLogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [user.actions.map((action, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                if (action === 'Delete') {\n                  handleDelete(user.id); // Call delete function on click\n                } else if (action === 'Edit') {\n                  toggleEdit(index); // Toggle edit mode on click\n                }\n              },\n              children: action\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this)), editIndex === index && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => saveChanges(index),\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(UserTable, \"Pbd0OVlzwkKEFLe96pxgFXFPO+w=\");\n_c = UserTable;\nexport default UserTable;\nvar _c;\n$RefreshReg$(_c, \"UserTable\");","map":{"version":3,"names":["React","useState","sortData","jsxDEV","_jsxDEV","UserTable","_s","initialUsers","id","name","role","email","lastLogin","actions","users","setUsers","sortedUsers","setSortedUsers","sortBy","setSortBy","sortDirection","setSortDirection","editIndex","setEditIndex","selectedRole","setSelectedRole","handleSort","field","direction","handleDelete","updatedUsers","filter","user","toggleEdit","index","saveChanges","usersToDisplay","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","value","onChange","e","target","action","idx","_c","$RefreshReg$"],"sources":["C:/Users/shash/Desktop/Hackathon/scb-bank-policy/src/components/UserTable.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { sortData } from '../utils/sort'; // Import your sorting function\r\n\r\nconst UserTable = () => {\r\n  const initialUsers = [\r\n    { id: 1, name: 'Shashwat sirjam', role: 'Admin', email: 'Shashwat@example.com', lastLogin: '2022-10-01', actions: ['Edit', 'Delete'] },\r\n    { id: 2, name: 'Mansi', role: 'User', email: 'Mansi@example.com', lastLogin: '2022-09-28', actions: ['Edit', 'Delete'] },\r\n    { id: 3, name: 'Sourabh', role: 'Admin', email: 'Sourabh@example.com', lastLogin: '2022-10-01', actions: ['Edit', 'Delete'] },\r\n    { id: 4, name: 'Purneeth', role: 'User', email: 'Purneeth@example.com', lastLogin: '2022-09-28', actions: ['Edit', 'Delete'] },\r\n    // Add more users as needed\r\n  ];\r\n\r\n  const [users, setUsers] = useState(initialUsers);\r\n  const [sortedUsers, setSortedUsers] = useState([]);\r\n  const [sortBy, setSortBy] = useState('name');\r\n  const [sortDirection, setSortDirection] = useState('asc');\r\n  const [editIndex, setEditIndex] = useState(-1); // Track the index of the user being edited\r\n  const [selectedRole, setSelectedRole] = useState(''); // Track the selected role for editing\r\n\r\n  // Function to handle sorting\r\n  const handleSort = (field) => {\r\n    const direction = sortBy === field && sortDirection === 'asc' ? 'desc' : 'asc';\r\n    setSortBy(field);\r\n    setSortDirection(direction);\r\n    setSortedUsers(sortData(users, field, direction));\r\n  };\r\n\r\n  // Function to delete a user\r\n  const handleDelete = (id) => {\r\n    const updatedUsers = users.filter(user => user.id !== id);\r\n    setUsers(updatedUsers);\r\n    setSortedUsers(sortData(updatedUsers, sortBy, sortDirection)); // Update sorted users if necessary\r\n  };\r\n\r\n  // Function to toggle edit mode for a user\r\n  const toggleEdit = (index) => {\r\n    setEditIndex(index === editIndex ? -1 : index); // Toggle edit mode\r\n    if (index !== editIndex) {\r\n      setSelectedRole(users[index].role); // Set selected role when entering edit mode\r\n    } else {\r\n      setSelectedRole(''); // Reset selected role when exiting edit mode\r\n    }\r\n  };\r\n\r\n  // Function to save changes for a user\r\n  const saveChanges = (index) => {\r\n    const updatedUsers = [...users];\r\n    updatedUsers[index].role = selectedRole; // Update user role with selected role\r\n    setUsers(updatedUsers);\r\n    setEditIndex(-1); // Exit edit mode\r\n    // Additional logic (e.g., API calls) can be added here\r\n  };\r\n\r\n  // Determine which array to display (sorted or original)\r\n  const usersToDisplay = sortedUsers.length > 0 ? sortedUsers : users;\r\n\r\n  return (\r\n    <div className=\"policy-table\">\r\n      <h2>User Management Overview</h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th onClick={() => handleSort('name')}>Name</th>\r\n            <th onClick={() => handleSort('role')}>Role</th>\r\n            <th onClick={() => handleSort('email')}>Email</th>\r\n            <th onClick={() => handleSort('lastLogin')}>Last Login</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {usersToDisplay.map((user, index) => (\r\n            <tr key={index}>\r\n              <td>{user.name}</td>\r\n              <td>\r\n                {editIndex === index ? (\r\n                  <select value={selectedRole} onChange={(e) => setSelectedRole(e.target.value)}>\r\n                    <option value=\"Admin\">Admin</option>\r\n                    <option value=\"User\">User</option>\r\n                    <option value=\"Creator\">Creator</option>\r\n                    <option value=\"Approver\">Approver</option>\r\n                    <option value=\"Creator and Approver\">Creator and Approver</option>\r\n                    {/* Add more role options as needed */}\r\n                  </select>\r\n                ) : (\r\n                  user.role\r\n                )}\r\n              </td>\r\n              <td>{user.email}</td>\r\n              <td>{user.lastLogin}</td>\r\n              <td>\r\n                {user.actions.map((action, idx) => (\r\n                  <button key={idx} onClick={() => {\r\n                    if (action === 'Delete') {\r\n                      handleDelete(user.id); // Call delete function on click\r\n                    } else if (action === 'Edit') {\r\n                      toggleEdit(index); // Toggle edit mode on click\r\n                    }\r\n                  }}>{action}</button>\r\n                ))}\r\n                {editIndex === index && (\r\n                  <button onClick={() => saveChanges(index)}>Save</button>\r\n                )}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}